{"version":3,"sources":["file:///C:/Users/agukp/Snake%20Match/assets/Scripts/SnakeController.ts"],"names":["_decorator","Component","RigidBody2D","Vec2","KeyCode","input","Input","ccclass","SnakeController","character","firstMove","velocity","snakeInside","onLoad","node","getComponent","linearVelocity","on","EventType","KEY_DOWN","onKeyDown","onDestroy","off","event","x","keyCode","KEY_W","tileMove","KEY_S","y","KEY_A","KEY_D","setPosition","Math","round","position","eatBall","ball"],"mappings":";;;;;;;;;;AACEA,MAAAA,U,OAAAA,U;AACAC,MAAAA,S,OAAAA,S;AACAC,MAAAA,W,OAAAA,W;AACAC,MAAAA,I,OAAAA,I;AACAC,MAAAA,O,OAAAA,O;AACAC,MAAAA,K,OAAAA,K;AAEAC,MAAAA,K,OAAAA,K;;;;;;;;;OAEI;AAAEC,QAAAA;AAAF,O,GAAcP,U;;iCAKPQ,e,WADZD,OAAO,CAAC,iBAAD,C,gBAAR,MACaC,eADb,SACqCP,SADrC,CAC+C;AAAA;AAAA;AAAA,eACrCQ,SADqC,GACZ,IADY;AAAA,eAGrCC,SAHqC,GAGhB,IAHgB;AAAA,eAKrCC,QALqC,GAKlB,CALkB;AAAA,eAOrCC,WAPqC,GAOT,EAPS;AAAA;;AAStCC,QAAAA,MAAM,GAAS;AACpB,eAAKJ,SAAL,GAAiB,KAAKK,IAAL,CAAUC,YAAV,CAAuBb,WAAvB,CAAjB;AAEA,eAAKO,SAAL,CAAeO,cAAf,GAAgC,IAAIb,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAhC;AAEAE,UAAAA,KAAK,CAACY,EAAN,CAASX,KAAK,CAACY,SAAN,CAAgBC,QAAzB,EAAmC,KAAKC,SAAxC,EAAmD,IAAnD;AACD;;AAEMC,QAAAA,SAAS,GAAS;AACvBhB,UAAAA,KAAK,CAACiB,GAAN,CAAUhB,KAAK,CAACY,SAAN,CAAgBC,QAA1B,EAAoC,KAAKC,SAAzC,EAAoD,IAApD;AACD;;AAEOA,QAAAA,SAAS,CAACG,KAAD,EAA6B;AAC5C,cAAI,KAAKd,SAAL,CAAeO,cAAf,CAA8BQ,CAA9B,IAAmC,CAAnC,IAAwC,KAAKd,SAAjD,EAA4D;AAC1D,oBAAQa,KAAK,CAACE,OAAd;AACE,mBAAKrB,OAAO,CAACsB,KAAb;AACE,qBAAKjB,SAAL,CAAeO,cAAf,GAAgC,IAAIb,IAAJ,CAAS,CAAT,EAAY,KAAKQ,QAAjB,CAAhC;AACA,qBAAKgB,QAAL;AACA;;AACF,mBAAKvB,OAAO,CAACwB,KAAb;AACE,qBAAKnB,SAAL,CAAeO,cAAf,GAAgC,IAAIb,IAAJ,CAAS,CAAT,EAAY,CAAC,KAAKQ,QAAlB,CAAhC;AACA,qBAAKgB,QAAL;AACA;AARJ;AAUD,WAXD,MAWO,IAAI,KAAKlB,SAAL,CAAeO,cAAf,CAA8Ba,CAA9B,IAAmC,CAAnC,IAAwC,KAAKnB,SAAjD,EAA4D;AACjE,oBAAQa,KAAK,CAACE,OAAd;AACE,mBAAKrB,OAAO,CAAC0B,KAAb;AACE,qBAAKH,QAAL;AACA,qBAAKlB,SAAL,CAAeO,cAAf,GAAgC,IAAIb,IAAJ,CAAS,CAAC,KAAKQ,QAAf,EAAyB,CAAzB,CAAhC;AACA;;AACF,mBAAKP,OAAO,CAAC2B,KAAb;AACE,qBAAKtB,SAAL,CAAeO,cAAf,GAAgC,IAAIb,IAAJ,CAAS,KAAKQ,QAAd,EAAwB,CAAxB,CAAhC;AACA,qBAAKgB,QAAL;AACA;AARJ;AAUD;AACF;;AAEOA,QAAAA,QAAQ,GAAS;AACvB,eAAKjB,SAAL,GAAiB,KAAjB;AACA,eAAKI,IAAL,CAAUkB,WAAV,CACEC,IAAI,CAACC,KAAL,CAAW,KAAKpB,IAAL,CAAUqB,QAAV,CAAmBX,CAAnB,GAAuB,EAAlC,IAAwC,EAD1C,EAEES,IAAI,CAACC,KAAL,CAAW,KAAKpB,IAAL,CAAUqB,QAAV,CAAmBN,CAAnB,GAAuB,EAAlC,IAAwC,EAF1C;AAID;;AAEOO,QAAAA,OAAO,CAACC,IAAD,EAAoB,CAAE;;AAvDQ,O","sourcesContent":["import {\n  _decorator,\n  Component,\n  RigidBody2D,\n  Vec2,\n  KeyCode,\n  input,\n  EventKeyboard,\n  Input,\n} from \"cc\";\nconst { ccclass } = _decorator;\n\ntype Balls = \"green\" | \"blue\" | \"red\" | \"yellow\";\n\n@ccclass(\"SnakeController\")\nexport class SnakeController extends Component {\n  private character: RigidBody2D = null;\n\n  private firstMove: boolean = true;\n\n  private velocity: number = 5;\n\n  private snakeInside: Array<Balls> = [];\n\n  public onLoad(): void {\n    this.character = this.node.getComponent(RigidBody2D);\n\n    this.character.linearVelocity = new Vec2(0, 0);\n\n    input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n  }\n\n  public onDestroy(): void {\n    input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n  }\n\n  private onKeyDown(event: EventKeyboard): void {\n    if (this.character.linearVelocity.x != 0 || this.firstMove) {\n      switch (event.keyCode) {\n        case KeyCode.KEY_W:\n          this.character.linearVelocity = new Vec2(0, this.velocity);\n          this.tileMove();\n          break;\n        case KeyCode.KEY_S:\n          this.character.linearVelocity = new Vec2(0, -this.velocity);\n          this.tileMove();\n          break;\n      }\n    } else if (this.character.linearVelocity.y != 0 || this.firstMove) {\n      switch (event.keyCode) {\n        case KeyCode.KEY_A:\n          this.tileMove();\n          this.character.linearVelocity = new Vec2(-this.velocity, 0);\n          break;\n        case KeyCode.KEY_D:\n          this.character.linearVelocity = new Vec2(this.velocity, 0);\n          this.tileMove();\n          break;\n      }\n    }\n  }\n\n  private tileMove(): void {\n    this.firstMove = false;\n    this.node.setPosition(\n      Math.round(this.node.position.x / 30) * 30,\n      Math.round(this.node.position.y / 30) * 30\n    );\n  }\n\n  private eatBall(ball: Balls): void {}\n}\n"]}